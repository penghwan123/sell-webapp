{"version":3,"sources":["utils.js"],"names":[],"mappings":"AAAA;;;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,SAAS,QAAQ,WAAR,CAAf;AACA,IAAM,oBAAoB,QAAQ,6BAAR,CAA1B;AACA,IAAM,gBAAgB,QAAQ,iBAAR,CAAtB;;AAEA,QAAQ,UAAR,GAAqB,UAAU,KAAV,EAAiB;AACpC,MAAM,qBAAqB,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAAzB,GACvB,OAAO,KAAP,CAAa,kBADU,GAEvB,OAAO,GAAP,CAAW,kBAFf;;AAIA,SAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,kBAAhB,EAAoC,KAApC,CAAP;AACD,CAND;;AAQA,QAAQ,UAAR,GAAqB,UAAU,OAAV,EAAmB;AACtC,YAAU,WAAW,EAArB;;AAEA,MAAM,YAAY;AAChB,YAAQ,YADQ;AAEhB,aAAS;AACP,iBAAW,QAAQ;AADZ;AAFO,GAAlB;;AAOA,MAAM,gBAAgB;AACpB,YAAQ,gBADY;AAEpB,aAAS;AACP,iBAAW,QAAQ;AADZ;;AAKX;AAPsB,GAAtB,CAQA,SAAS,eAAT,CAA0B,MAA1B,EAAkC,aAAlC,EAAiD;AAC/C,QAAM,UAAU,QAAQ,UAAR,GAAqB,CAAC,SAAD,EAAY,aAAZ,CAArB,GAAkD,CAAC,SAAD,CAAlE;;AAEA,QAAI,MAAJ,EAAY;AACV,cAAQ,IAAR,CAAa;AACX,gBAAQ,SAAS,SADN;AAEX,iBAAS,eAAc,EAAd,EAAkB,aAAlB,EAAiC;AACxC,qBAAW,QAAQ;AADqB,SAAjC;AAFE,OAAb;AAMD;;AAED;AACA;AACA,QAAI,QAAQ,OAAZ,EAAqB;AACnB,aAAO,kBAAkB,OAAlB,CAA0B;AAC/B,aAAK,OAD0B;AAE/B,kBAAU;AAFqB,OAA1B,CAAP;AAID,KALD,MAKO;AACL,aAAO,CAAC,kBAAD,EAAqB,MAArB,CAA4B,OAA5B,CAAP;AACD;AACF;;AAED;AACA,SAAO;AACL,SAAK,iBADA;AAEL,aAAS,iBAFJ;AAGL,UAAM,gBAAgB,MAAhB,CAHD;AAIL,UAAM,gBAAgB,MAAhB,EAAwB,EAAE,gBAAgB,IAAlB,EAAxB,CAJD;AAKL,UAAM,gBAAgB,MAAhB,CALD;AAML,YAAQ,gBAAgB,QAAhB,CANH;AAOL,UAAM,gBAAgB,QAAhB;AAPD,GAAP;AASD,CApDD;;AAsDA;AACA,QAAQ,YAAR,GAAuB,UAAU,OAAV,EAAmB;AACxC,MAAM,SAAS,EAAf;AACA,MAAM,UAAU,QAAQ,UAAR,CAAmB,OAAnB,CAAhB;;AAEA,OAAK,IAAM,SAAX,IAAwB,OAAxB,EAAiC;AAC/B,QAAM,SAAS,QAAQ,SAAR,CAAf;AACA,WAAO,IAAP,CAAY;AACV,YAAM,IAAI,MAAJ,CAAW,QAAQ,SAAR,GAAoB,GAA/B,CADI;AAEV,WAAK;AAFK,KAAZ;AAID;;AAED,SAAO,MAAP;AACD,CAbD;;AAeA,QAAQ,sBAAR,GAAiC,YAAM;AACrC,MAAM,WAAW,QAAQ,eAAR,CAAjB;;AAEA,SAAO,UAAC,QAAD,EAAW,MAAX,EAAsB;AAC3B,QAAI,aAAa,OAAjB,EAA0B;;AAE1B,QAAM,QAAQ,OAAO,CAAP,CAAd;AACA,QAAM,WAAW,MAAM,IAAN,IAAc,MAAM,IAAN,CAAW,KAAX,CAAiB,GAAjB,EAAsB,GAAtB,EAA/B;;AAEA,aAAS,MAAT,CAAgB;AACd,aAAO,cAAc,IADP;AAEd,eAAS,WAAW,IAAX,GAAkB,MAAM,IAFnB;AAGd,gBAAU,YAAY,EAHR;AAId,YAAM,KAAK,IAAL,CAAU,SAAV,EAAqB,UAArB;AAJQ,KAAhB;AAMD,GAZD;AAaD,CAhBD","file":"utils-compiled.js","sourcesContent":["'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  // generate loader string to be used with extract text plugin\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n  // https://vue-loader.vuejs.org/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n"]}